<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yaohan.bbs.dao.mapper.PostsReplyMapper">
  <cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
  <resultMap id="BaseResultMap" type="com.yaohan.bbs.dao.entity.PostsReply">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="posts_id" jdbcType="VARCHAR" property="postsId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yaohan.bbs.dao.entity.PostsReply">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, posts_id, create_time
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from posts_reply
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from posts_reply
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.yaohan.bbs.dao.entity.PostsReply">
    insert into posts_reply (id, user_id, posts_id, 
      create_time, content)
    values (#{id,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, #{postsId,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yaohan.bbs.dao.entity.PostsReply">
    insert into posts_reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="postsId != null">
        posts_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="postsId != null">
        #{postsId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yaohan.bbs.dao.entity.PostsReply">
    update posts_reply
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="postsId != null">
        posts_id = #{postsId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yaohan.bbs.dao.entity.PostsReply">
    update posts_reply
    set user_id = #{userId,jdbcType=VARCHAR},
      posts_id = #{postsId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yaohan.bbs.dao.entity.PostsReply">
    update posts_reply
    set user_id = #{userId,jdbcType=VARCHAR},
      posts_id = #{postsId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <select id="getByPostsId" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from posts_reply
    where posts_Id = #{postsId,jdbcType=VARCHAR}
    order by create_time desc
  </select>

  <select id="getRecentReplyByUserId" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from posts_reply
    where user_id = #{userId,jdbcType=VARCHAR}
    order by create_time desc
    limit 10;
  </select>

  <select id="getWeeklyTopReplys" parameterType="java.lang.Integer" resultType="java.util.HashMap">
    SELECT a.* , b.username, b.portrait
    FROM
    (SELECT user_id AS uid, COUNT(0) AS num
      FROM posts_reply
      WHERE create_time >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
      GROUP BY user_id
      LIMIT #{limit}
    ) a
    LEFT JOIN `user` b
    ON a.uid = b.id
    ORDER BY a.num DESC
  </select>

    <select id="getWeeklyHopReplys" parameterType="java.lang.Integer" resultType="java.util.HashMap">
    SELECT a.* , b.title
    FROM
    (SELECT posts_id AS pid, COUNT(0) AS num
      FROM posts_reply
      WHERE create_time >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)
      GROUP BY posts_id
      LIMIT #{limit}
    ) a
    LEFT JOIN `posts` b
    ON a.pid = b.id
    ORDER BY a.num DESC
  </select>

</mapper>